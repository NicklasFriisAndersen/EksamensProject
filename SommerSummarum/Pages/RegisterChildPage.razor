@page "/registerchild"
@using Core.Models
@using SommerSummarum.Services
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Blazorise.SignaturePad
@using ValidationSummary = Microsoft.AspNetCore.Components.Forms.ValidationSummary


<PageTitle>Registrer til børneklubben</PageTitle>

<h1>Registrer barn til børneklubben</h1>

<EditForm Model="childItem" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6 mb-3">
        <label for="Name">Navn</label>
        <InputText id="Name" @bind-Value="childItem.Name" class="form-control" placeholder="Indtast navn på barn" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Age">Alder<b> - OBS: Kun fra 5-15 år!</b></label>
        <InputNumber id="Age" @bind-Value="childItem.Age" class="form-control" placeholder="Indtast alder på barn"/>
    </div>

    <div class="col-md-6 mb-3">
        <label for="Hobbies">Hobbyer</label>
        <InputText id="Hobbies" @bind-Value="childItem.Hobbies" class="form-control" placeholder="Indtast barnets interesser" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="ClothingSize">T-shirt Størrelse</label>
        <InputSelect id="ClothingSize" @bind-Value="childItem.ClothingSize" class="form-control" placeholder="Vælg barnets tøjstørrelse">
            <option value="Vælg barnets tøjstørrelse">Vælg barnets tøjstørrelse</option>
            <option value="110-116">110-116</option>
            <option value="122-128">122-128</option>
            <option value="134-140">134-140</option>
            <option value="146-152">146-152</option>
            <option value="158-164">158-164</option>
            <option value="XS">XS</option>
            <option value="S">S</option>
        </InputSelect>


    </div>
    <div class="col-md-12 mb-3">
        <label for="Comment">Ekstra Kommentar</label>
        <InputText id="Comment" @bind-Value="childItem.Comment" class="form-control" placeholder="Indtast bemærkninger (evt. diagnose/sundhed/allergier)" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Krævnr">Krævnr <b>- OBS: Hvis du ikke som forælder deltager, indtast deltagende værges Kræwnr.</b></label>
        <InputNumber id="Krævnr" @bind-Value="childItem.Krævnr" class="form-control" placeholder="Indtast krævnummer" />
    </div>
   
    <div class="col-md-12 mb-3">
        <InputCheckbox id="isParent" @bind-Value="childItem.isParent" class="form-check-input" />
        <label for="isParent">Jeg som forælder deltager ikke selv, værge med angivet Kræwnummer deltager </label>
    </div>

    <div class="col-md-6 mb-3">
        <label for="ParentName">Forælder navn</label>
        <InputText id="ParentName" @bind-Value="childItem.ParentName" class="form-control" placeholder="Indtast navn på forælder" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="ParentPhoneNumber">Forælder telefonnr.</label>
        <InputText id="ParentPN" @bind-Value="childItem.ParentPhoneNumber" class="form-control" placeholder="Indtast telefonnr. på forælder" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="ParentEmail">Forælder Email</label>
        <InputText id="ParentEmail" @bind-Value="childItem.ParentEmail" class="form-control" placeholder="Indtast Email på forælder" />
    </div>


    <!-- Første prioritet-->
    <div class="col-md-3 mb-3">
        <label for="Priority1">1. Prioritet</label>

        <!-- Vælg ugenummer-->
        <InputSelect @bind-Value="firstPriority.Week" class="form-control">
            <option value="">Vælg Ugenummer</option>
            @foreach (var item in periodList)
            {
                if (weekAmountDict.TryGetValue(item.Week, out int existing) && existing >= 15)
                {
                    <option value="@item.Week">@item.Week - Få pladser tilbage</option>
                }
                else
                {
                    <option value="@item.Week">@item.Week</option>
                }
                
            }
        </InputSelect>
        <!-- Vælg dag, viser ikke gentagne værdier-->
        <InputSelect @bind-Value="firstPriority.Day" class="form-control">
            @{
                var displayedDays = new List<string>();
                <option value="">Vælg Periode</option>

                foreach (var item in periodList)
                {

                    foreach (var day in item.Days)
                    {
                        if (!displayedDays.Contains(day))
                        {
                            displayedDays.Add(day);
                            <option value="@day">@day</option>
                        }
                    }
                }
            }
        </InputSelect>
    </div>

    <!-- Anden prioritet-->
    <div class="col-md-3 mb-3">
        <label for="Priority1">2. Prioritet</label>

        <!-- Vælg ugenummer-->
        <InputSelect @bind-Value="secondPriority.Week" class="form-control">
            <option value="">Vælg Ugenummer</option>
            <option value="Jeg kan kun i 1. prioritet">Jeg kan kun i 1. prioritet</option>


            @foreach (var item in periodList)
            {
                if (weekAmountDict.TryGetValue(item.Week, out int existing) && existing >= 15)
                                {
                                    <option value="@item.Week">@item.Week - Få pladser tilbage</option>
                                }
                                else
                                {
                                    <option value="@item.Week">@item.Week</option>
                                }
            }
        </InputSelect>
        <!-- Vælg dag, viser ikke gentagne værdier-->
        <InputSelect @bind-Value="secondPriority.Day" class="form-control">
            @{

                var displayedDays = new List<string>();
                <option value="">Vælg Periode</option>
                <option value="Jeg kan kun i 1. prioritet">Jeg kan kun i 1. prioritet</option>


                foreach (var item in periodList)
                {
                    foreach (var day in item.Days)
                    {
                        if (!displayedDays.Contains(day))
                        {
                            displayedDays.Add(day);
                            <option value="@day">@day</option>
                        }
                    }
                }
            }
        </InputSelect>
    </div>
    <div class="col-md-12 mb-3">

        @if (showPeriodError)
        {
            <p class="text-danger">Du skal vælge en gyldig periode.</p>
        }
    </div>
    <!-- Checkbokse-->
    <div class="col-md-12 mb-3">
        <InputCheckbox id="Newsletter" @bind-Value="childItem.Newsletter" class="form-check-input" />
        <label for="Newsletter">Jeg vil gerne modtage en Email med informationer når Børneklubben åbner for tilmelding næste år</label>
    </div>

    <div class="col-md-12 mb-3">
        <InputCheckbox id="BeenBefore" @bind-Value="childItem.BeenBefore" class="form-check-input" />
        <label for="BeenBefore">Mit barn har været i Cirkus Summarum's pasningsordning før</label>
    </div>




    <div class="col-md-12 mb-3">
        <InputCheckbox id="IsVolunteering" @bind-Value="isVolunteering" class="form-check-input" />
        <label for="IsVolunteering">Jeg har selv været inde og oprette mig selv som frivilig på Cirkus Summarum</label>

        @if (showVolunteerError)
        {
            <p class="text-danger">Du skal selv allerede være registreret som frivillig for at registrere dit barn.</p>
        }
    </div>

    <div class="col-md-12 mb-3">
        <InputCheckbox id="IsTilsagn" @bind-Value="isTilsagn" class="form-check-input" />
        <label for="IsTilsagn">Jeg giver tilsagt til at barnet opholder sig i Cirkus Summarums Børneklub</label>
        <a href="https://cirkussummarum.dk/om-cirkus-summarum/politikker/" target="_blank">[Politikker]</a>
        @if (showTilsagnError)
        {
            <p class="text-danger">Tilsigelse er nødvendigt for tilmelding</p>
        }
    </div>

    <!-- Underskrift-->
    <div>
        <label>Underskrift fra forælder</label>
        <br />
        <SignaturePad CanvasWidth="600" CanvasHeight="400" @bind-Value="@childItem.GuardianSignature" Class="signature-pad" Style="width: 100%; height: 300px; outline-style: dotted"></SignaturePad>
    </div>
    <div class="col-12 mb-3">
        <button class="btn btn-primary" @onclick="() => HandleValidSubmit()">Ansøg</button>
    </div>
</EditForm>

<ModalDialog @ref="ConfirmationDialog" Title="Confirm register">
    <div class="row p-3">
        <div class="col-md-6 mb-3">
            <strong>Navn:</strong>
            <p>@currentRegisteredChild?.Name</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>Alder:</strong>
            <p>@currentRegisteredChild?.Age</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>T-shirt størrelse:</strong>
            <p>@currentRegisteredChild?.ClothingSize</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>Har deltage før:</strong>
            <p>@currentRegisteredChild?.BeenBefore</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>Krævnr:</strong>
            <p>@currentRegisteredChild?.Krævnr</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>Hobbyer:</strong>
            <p>@currentRegisteredChild?.Hobbies</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Kommentarer:</strong>
            <p>@currentRegisteredChild?.Comment</p>
        </div>

        <div class="col-md-6 mb-3">
            <strong>Værge navn:</strong>
            <p>@currentRegisteredChild?.ParentName</p>
        </div>
        <div class="col-md-6 mb-3">
            <strong>Værge tfl.nr.:</strong>
            <p>@currentRegisteredChild?.ParentPhoneNumber</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Værge Email:</strong>
            <p>@currentRegisteredChild?.ParentEmail</p>
        </div>
        @if (currentRegisteredChild?.GuardianSignature is not null)
        {
            <div class="col-md-6 mb-3">
                <strong>Underskrift:</strong>
                <img src="data:image/jpg;base64, @Convert.ToBase64String(currentRegisteredChild?.GuardianSignature)" width="200" />
            </div>
        }
        <div class="col-12 mb-3">
            <button class="btn btn-success" @onclick="AddChild">Ansøg</button>
        </div>


    </div>
</ModalDialog>

@code {
    private string serverUrl = "https://localhost:7016";

    private EditContext? aEditContext;

    private User? user;

    private List<Period>? periodList = new();

    private bool showVolunteerError = false;
    private bool showPeriodError = false;
    private bool showTilsagnError = false;

    public bool isDateInput = false;
    public bool isVolunteering = false;
    public bool isTilsagn = false;
    public bool isParent = false;

    private AssignedPeriod assignedPeriod = new AssignedPeriod();

    private Priority firstPriority = new Priority();
    private Priority secondPriority = new Priority();

    private RegisteredChild childItem = new RegisteredChild();
    private RegisteredChild? currentRegisteredChild;
    private ModalDialog ConfirmationDialog;

    private Dictionary<string, int> weekAmountDict = new Dictionary<string, int>(); 
    

    public string defaultValue = null;

    [Inject]
    private IRegisterChildService rService { get; set; }

    [Inject]
    private IPeriodService pService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(childItem);
        var childs = await rService.GetAllChildren();
        foreach (var child in childs)
        {
            if (weekAmountDict.TryGetValue(child.AssignedPeriod.Week, out int existing))
            {
                weekAmountDict[child.AssignedPeriod.Week] = existing + 1;
            }
            else
            {
                weekAmountDict.Add(child.AssignedPeriod.Week, 1);

            }
        }
        
        periodList = await pService.GetAllPeriod();
        
    }

    public void OpenConfirmationDialog(RegisteredChild child)
    {
        currentRegisteredChild = child;
        ConfirmationDialog.Open();
    }

    public void HandleValidSubmit()
    {
        if (firstPriority.Day == null || firstPriority.Week == null || secondPriority.Day == null || secondPriority.Week == null)
        {
            showPeriodError = true;
        }
        else
        {
            showPeriodError = false;
            isDateInput = true;
        }

        if (isVolunteering)
        {
            showVolunteerError = false;
            isVolunteering = true;

        }
        else
        {
            // If not volunteering, show an error and do not open the dialog
            showVolunteerError = true;
        }

        if (isTilsagn)
        {
            showTilsagnError = false;
            isTilsagn = true;
        }
        else
        {
            showTilsagnError = true;
        }

        if(isDateInput & isVolunteering & isTilsagn)
        {
            OpenConfirmationDialog(childItem); // Only open the dialog if volunteering is true
        }
    }

    public async Task AddChild()
    {
        childItem.AssignedPeriod = assignedPeriod;
        childItem.DateAdded = DateTime.Now;
        childItem.FirstPriority = firstPriority;
        childItem.SecondPriority = secondPriority;

        await rService.AddChildItem(childItem);

        childItem = new(); // clear fields in form
        aEditContext = new EditContext(childItem); // Reset the edit context
        ConfirmationDialog.Close();
        NavigationManager.NavigateTo("/confirmationpage");

    }


}

