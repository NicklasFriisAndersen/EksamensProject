@inject NavigationManager navigationManager;
@inject HttpClient Http;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Core.Models
@using System.Text.Json
@using Blazorise.SignaturePad
@using SommerSummarum.Services
@using ValidationSummary = Microsoft.AspNetCore.Components.Forms.ValidationSummary

@page "/RegisterU18VolunteerPage"
<h3>RegisterU18VolunteerPage</h3>

<EditForm EditContext="@aEditContext" class="row p-3" OnValidSubmit="@OpenConfirmationDialog">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6 mb-3">
        <label for="Navn">Navn</label>
        <InputText id="Navn" @bind-Value="u18VolunteerItem.Name" class="form-control" placeholder="Indtast navn på frivillig ung"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="Kraevnummer">Krævnummer</label>
        <InputText id="Kraevnummer" @bind-Value="u18VolunteerItem.KraevnummerU18" class="form-control" placeholder="Indtast krævnummer på frivillig ung"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="ParentName">Navn på værge</label>
        <InputText id="ParentName" @bind-Value="u18VolunteerItem.ParentName" class="form-control" placeholder="Indtast navn på værge"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="ParentPhoneNumber">Telefonnummer på værge</label>
        <InputText id="ParentPhoneNumber" @bind-Value="u18VolunteerItem.ParentPhoneNumber" class="form-control" placeholder="Indtast telefonnummer på værge"/>
    </div>
    <div class="col-md-6 mb-3">
        <label for="ParentEmail">Email på værge</label>
        <InputText id="ParentEmail" @bind-Value="u18VolunteerItem.ParentEmail" class="form-control" placeholder="Indtast email på værge"/>
    </div>
    <div>
        <label>Underskrift fra værge</label>
        <br/>
        <SignaturePad CanvasWidth="600" CanvasHeight="400" @bind-Value="@u18VolunteerItem.GuardianSignature" Class="signature-pad" Style="width: 100%; height: 300px; outline-style: dotted"></SignaturePad>
    </div>
    
  
   
    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Tilmeld frivillig under 18</button>
    </div>
</EditForm>

<ModalDialog @ref="ConfirmationDialog" Title="Confirm register">
    <div class="row p-3">
        <div class="col-md-12 mb-3">
            <strong>Navn:</strong>
            <p>@u18VolunteerItem.Name</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Krævnummer på frivillig U18:</strong>
            <p>@u18VolunteerItem.KraevnummerU18</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Navn på værge:</strong>
            <p>@u18VolunteerItem.ParentName</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Telefon nummer på værge:</strong>
            <p>@u18VolunteerItem.ParentPhoneNumber</p>
        </div>
        <div class="col-md-12 mb-3">
            <strong>Email på værge:</strong>
            <p>@u18VolunteerItem.ParentEmail</p>
        </div>
        @if (u18VolunteerItem?.GuardianSignature is not null)
        {
            <div class="col-md-12 mb-3">
                <strong>Underskrift:</strong>
                <img src="data:image/jpg;base64, @Convert.ToBase64String(u18VolunteerItem?.GuardianSignature)" width="200" />
            </div>
        }
        
        <div class="col-12 mb-3">
            <button class="btn btn-success" @onclick="HandleValidSubmit">Bekræft</button>
            <!--<button class="btn btn-secondary" @onclick="() => ConfirmationDialog.Close()">Annuller</button>-->
        </div>
    </div>
</ModalDialog>




@code {
    private User? user;
    
    private EditContext? aEditContext;

    private string serverUrl = "https://localhost:7016";

    private U18Volunteer u18VolunteerItem = new U18Volunteer();
    
    private ModalDialog ConfirmationDialog;
    
    [Inject]
    private IU18VolunteerService uService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(u18VolunteerItem);
        var userInfoJson = await localStore.GetItemAsStringAsync("userinfo");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            user = JsonSerializer.Deserialize<User>(userInfoJson);
        }
    }

    public async Task OpenConfirmationDialog()
    {
        ConfirmationDialog.Open();
    }

    
    public async Task HandleValidSubmit()
    {
        u18VolunteerItem.DateAdded = DateTime.Now;
        await uService.AddU18Volunteer(u18VolunteerItem);
        u18VolunteerItem = new();
        ConfirmationDialog.Close();
    }
    
}
