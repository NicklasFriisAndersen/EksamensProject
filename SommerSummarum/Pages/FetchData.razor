@page "/fetchdata"
@using Core.Models;
@using System.Text.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStore


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<EditForm Model="childItem" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-12 mb-3">
        <label for="Name">Navn</label>
        <InputText id="Name" @bind-Value="childItem.Name" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Age">Alder</label>
        <InputNumber id="Age" @bind-Value="childItem.Age" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="ClothingSize">T-shirt Størrelse</label>
        <InputText id="ClothingSize" @bind-Value="childItem.ClothingSize" class="form-control" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Comment">Ekstra Kommentar </label>
        <InputText id="Comment" @bind-Value="childItem.Comment" class="form-control" />
    </div>

    <div class="col-md-6 mb-3">
        <label for="Krævnr">Krævnr </label>
        <InputNumber id="Krævnr" @bind-Value="childItem.Krævnr" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Hobbies">Hobbyer </label>
        <InputText id="Hobbies" @bind-Value="childItem.Hobbies" class="form-control" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Signature">Underskrift </label>
        <InputText id="Signature" @bind-Value="childItem.Signature" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="BeenBefore">Har været før</label>
        <InputCheckbox id="BeenBefore" @bind-Value="childItem.BeenBefore" class="form-check-input" />
    </div>

    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Add</button>
    </div>
</EditForm>

@code {

    private string serverUrl = "https://localhost:7016";

    private EditContext? aEditContext;

    private User? user;

    private RegisteredChild childItem = new RegisteredChild();

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(childItem);
        var userInfoJson = await localStore.GetItemAsStringAsync("userinfo");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            user = JsonSerializer.Deserialize<User>(userInfoJson);
        }
    }


    public async Task HandleValidSubmit()
    {
        await AddListingItem();
        //listingList = await Http.GetFromJsonAsync<Listing[]>($"{serverUrl}/api/listing/getall");
    }

    private async Task AddListingItem()
    {
        childItem.User = user;
        childItem.DateAdded = DateTime.Now;
        await Http.PostAsJsonAsync<RegisteredChild>($"{serverUrl}/api/registeredchildren/add", childItem);
        Console.WriteLine("Klient: add " + childItem.Name);
        childItem = new(); // clear fields in form
    }
}

